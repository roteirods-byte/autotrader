import streamlit as st
import pandas as pd
from datetime import datetime

# ---------- Config da p√°gina ----------
st.set_page_config(
    page_title="Automa√ß√£o Cripto",
    page_icon="üß†",
    layout="wide",
)

# ---------- Estilos finos ----------
CUSTOM_CSS = """
<style>
/* tira o r√°dio lateral do esqueleto antigo, caso ainda exista em cache */
section[data-testid="stSidebar"] div:has(> label:contains("Pain√©is")) { display:none; }

/* cabe√ßalho */
.hdr h1 {
  font-weight: 800;
  letter-spacing: .5px;
  margin-bottom: .25rem;
}
.hdr .sub {
  color: #93b3ff;
  font-size: 0.9rem;
}

/* cart√µes de m√©trica */
.card {
  background: rgba(255,255,255,0.04);
  border: 1px solid rgba(255,255,255,0.06);
  border-radius: 16px;
  padding: 1rem 1.25rem;
}
.card h4 { margin: 0 0 .35rem 0; font-weight: 700; }
.card .muted { color: #9db4ff; font-size: .85rem; }

/* Tabela */
tbody tr:hover { background: rgba(255,255,255,0.03) !important; }

/* bot√µes */
.stButton>button {
  border-radius: 10px;
  padding: .6rem 1rem;
  font-weight: 700;
}

/* inputs */
.stNumberInput input, .stTextInput input {
  border-radius: 10px;
}

/* tabs no topo mais vis√≠veis */
.stTabs [data-baseweb="tab"] {
  font-weight: 700;
}
</style>
"""
st.markdown(CUSTOM_CSS, unsafe_allow_html=True)

# ---------- Estado em mem√≥ria ----------
if "moedas_df" not in st.session_state:
    st.session_state.moedas_df = pd.DataFrame(
        [
            {"Par": "BTC/USDT", "Filtro": "Top10", "Peso": 1.0},
            {"Par": "ETH/USDT", "Filtro": "Top10", "Peso": 1.0},
        ]
    )

# ---------- Cabe√ßalho ----------
col1, col2 = st.columns([1, 4])
with col1:
    st.markdown("### üß†")
with col2:
    st.markdown('<div class="hdr"><h1>AUTOMA√á√ÉO CRIPTO</h1>'
                '<div class="sub">Interface do projeto ‚Äî layout aprovado</div></div>',
                unsafe_allow_html=True)

st.divider()

# ---------- Abas principais ----------
tab_email, tab_moedas, tab_entrada, tab_saida, tab_estado = st.tabs(
    ["üìß E-mail", "üí± Moedas", "üéØ Entrada", "üèÅ Sa√≠da", "üìä Estado"]
)

# --- E-MAIL ---
with tab_email:
    st.write("Configura√ß√µes de e-mail (usaremos App Password).")
    c1, c2, c3 = st.columns([1.2, 1, 1])
    with c1:
        email_principal = st.text_input("Principal", placeholder="seu-email@dominio.com")
    with c2:
        senha_app = st.text_input("Senha (app password)", type="password")
    with c3:
        destino = st.text_input("Envio (opcional)", placeholder="para@dominio.com")

    if st.button("ENVIAR / SALVAR", type="primary"):
        st.session_state.email_cfg = {
            "principal": email_principal.strip(),
            "senha": senha_app.strip(),
            "envio": destino.strip(),
            "atualizado_em": datetime.utcnow().isoformat()
        }
        st.success("Configura√ß√µes salvas (em mem√≥ria por enquanto).")

# --- MOEDAS ---
with tab_moedas:
    st.write("Defina pares, filtros e pesos.")
    st.markdown("> Voc√™ pode editar os valores diretamente na tabela abaixo.")

    edited = st.data_editor(
        st.session_state.moedas_df,
        num_rows="dynamic",
        use_container_width=True,
        hide_index=True,
        column_config={
            "Par": st.column_config.TextColumn("Par", help="Ex.: BTC/USDT"),
            "Filtro": st.column_config.TextColumn("Filtro", help="Ex.: Top10, Vol, etc."),
            "Peso": st.column_config.NumberColumn("Peso", min_value=0.0, max_value=10.0, step=0.1),
        },
    )
    colA, colB = st.columns([1, 3])
    with colA:
        if st.button("Salvar pares/pesos", use_container_width=True):
            st.session_state.moedas_df = edited.copy()
            st.success("Moedas salvas (em mem√≥ria).")
    with colB:
        st.info("Integra√ß√£o: depois conectamos isto √† fonte real (planilha/DB).")

# --- ENTRADA ---
with tab_entrada:
    st.write("Regras de entrada")
    a, b, c = st.columns(3)
    with a:
        risco = st.number_input("Risco por trade (%)", min_value=0.0, max_value=100.0, value=1.0, step=0.1)
        alav = st.number_input("Alavancagem", min_value=1, max_value=125, value=1, step=1)
    with b:
        tipo_sinal = st.selectbox("Tipo de sinal", ["Cruzamento", "Rompimento", "RSI", "MACD"])
        fonte = st.text_input("Fonte do sinal (ex.: binance, tradingview)")
    with c:
        spread = st.number_input("Spread m√°ximo (%)", min_value=0.0, max_value=5.0, value=0.2, step=0.05)
        derrap = st.number_input("Derrapagem m√°x. (%)", min_value=0.0, max_value=5.0, value=0.1, step=0.05)

    st.markdown('<div class="card"><h4>Valida√ß√£o</h4>'
                '<div class="muted">Espa√ßo reservado para c√°lculos/valida√ß√µes de entrada.</div></div>',
                unsafe_allow_html=True)

# --- SA√çDA ---
with tab_saida:
    st.write("Gest√£o de sa√≠da")
    a, b, c = st.columns(3)
    with a:
        alvo1 = st.number_input("Alvo 1 (%)", min_value=0.0, max_value=100.0, value=1.0, step=0.1)
        alvo2 = st.number_input("Alvo 2 (%)", min_value=0.0, max_value=100.0, value=2.0, step=0.1)
    with b:
        stop = st.number_input("Parada (%)", min_value=0.0, max_value=100.0, value=1.0, step=0.1)
        be = st.checkbox("Break-even autom√°tico", value=False)
    with c:
        modo = st.selectbox("Modo √† direita", ["Desligado", "Trailing stop", "Parcial"])
        direita = st.number_input("√Ä direita (%)", min_value=0.0, max_value=100.0, value=0.5, step=0.1)

    st.markdown('<div class="card"><h4>Execu√ß√£o</h4>'
                '<div class="muted">Aqui conectaremos a l√≥gica real de fechamento quando a automa√ß√£o estiver plugada.</div></div>',
                unsafe_allow_html=True)

# --- ESTADO ---
with tab_estado:
    st.write("Monitor")
    m1, m2, m3, m4 = st.columns(4)
    m1.metric("Negocia√ß√µes abertas", 0)
    m2.metric("Sinais pendentes", 0)
    m3.metric("Exposi√ß√£o", "‚Äî")
    m4.metric("Lucro Hoje", "‚Äî")

    st.markdown('<div class="card"><h4>Logs</h4>'
                '<div class="muted">Logs e status em tempo real vir√£o aqui.</div></div>',
                unsafe_allow_html=True)
